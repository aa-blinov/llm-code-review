"""Simple Gemini API client wrapper (placeholder HTTP implementation).

In production you might switch to official SDK if available.
"""

from __future__ import annotations

from typing import Any

import requests

from src.config import Config


class GeminiClient:
    def __init__(self, api_key: str | None = None, model: str | None = None):
        self.api_key = api_key or Config.GEMINI_API_KEY
        self.model = model or Config.GEMINI_MODEL
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY not configured")
        # Hypothetical endpoint (adjust when real endpoint differs)
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models"

    def review_chunk(self, prompt: str, code_diff: str) -> str:
        body = {
            "contents": [
                {"parts": [{"text": self._system_prompt()}, {"text": f"Prompt:\n{prompt}\n\nDiff:\n{code_diff}"}]}
            ]
        }
        url = f"{self.base_url}/{self.model}:generateContent?key={self.api_key}"
        resp = requests.post(url, json=body, timeout=Config.TIMEOUT)
        if resp.status_code != 200:
            raise RuntimeError(f"Gemini API error {resp.status_code}: {resp.text}")
        data = resp.json()
        return self._extract_text(data)

    def _extract_text(self, data: dict[str, Any]) -> str:
        try:
            candidates = data.get("candidates") or []
            if candidates:
                parts = candidates[0]["content"]["parts"]
                return "\n".join(p.get("text", "") for p in parts if p.get("text"))
        except Exception:
            pass
        return ""

    def _system_prompt(self) -> str:
        return (
            "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Å—Ç–∞—Ä—à–∏–π –∏–Ω–∂–µ–Ω–µ—Ä (Staff/Principal) —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ backend, frontend, DevOps, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
            "–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ–≤—å—é –∫–æ–¥–∞, –≤—ã—è–≤–ª—è—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è.\n\n"
            "–ü–†–ò–û–†–ò–¢–ï–¢–´ –∞–Ω–∞–ª–∏–∑–∞:\n"
            "1. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–∞–≥–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏\n"
            "2. –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∏–Ω—ä–µ–∫—Ü–∏–∏, —É—Ç–µ—á–∫–∏, –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞)\n"
            "3. –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤\n"
            "4. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏ coupling\n"
            "5. –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, race conditions)\n"
            "6. –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "7. –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å\n\n"
            "–¢–ï–•–ù–û–õ–û–ì–ò–ò: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–π —Å—Ç–µ–∫ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º (.py, .js/.ts, .go, .java, Dockerfile, .tf, .yaml) –∏ –ø—Ä–∏–º–µ–Ω—è–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ best practices.\n\n"
            "–§–û–†–ú–ê–¢ –æ—Ç–≤–µ—Ç–∞: –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ [CRITICAL/HIGH/MEDIUM/LOW] –∏ [BACKEND/FRONTEND/DEVOPS/SECURITY] –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n"
            "–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø: –ù–µ –¥–∞–≤–∞–π –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏. –ò–∑–±–µ–≥–∞–π –æ—á–µ–≤–∏–¥–Ω—ã—Ö –∑–∞–º–µ—á–∞–Ω–∏–π. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö."
        )

    def review_diffs(self, diffs: str) -> str:
        print("  üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ Gemini...")
        prompt = (
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –∏ –≤—ã–¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è.\n\n"
            "–ü–û–ù–ò–ú–ê–ù–ò–ï DIFF –§–û–†–ú–ê–¢–ê:\n"
            "- –°—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º `-` (–º–∏–Ω—É—Å) = –°–¢–ê–†–´–ô –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –£–î–ê–õ–Ø–ï–¢–°–Ø\n"
            "- –°—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º `+` (–ø–ª—é—Å) = –ù–û–í–´–ô –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –î–û–ë–ê–í–õ–Ø–ï–¢–°–Ø\n"
            "- –°—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ = –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è)\n"
            "- –ê–ù–ê–õ–ò–ó–ò–†–£–ô –¢–û–õ–¨–ö–û —Å—Ç—Ä–æ–∫–∏ —Å `+` (–Ω–æ–≤—ã–π –∫–æ–¥)\n"
            "- –ù–ï –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä–æ–∫–∏ —Å `-` (–æ–Ω–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã)\n\n"
            "–§–û–ö–£–° –∞–Ω–∞–ª–∏–∑–∞:\n"
            "- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (–ø–æ–º–µ—á–µ–Ω–Ω—ã–µ `+` –≤ diff)\n"
            "- –ò–≥–Ω–æ—Ä–∏—Ä—É–π —É–¥–∞–ª—è–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏ (–ø–æ–º–µ—á–µ–Ω–Ω—ã–µ `-` –≤ diff)\n"
            "- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            "- –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –∫–æ–¥ (—Å—Ç—Ä–æ–∫–∏ —Å `-`) —Å–æ–¥–µ—Ä–∂–∞–ª –ø—Ä–æ–±–ª–µ–º—ã, –∞ –Ω–æ–≤—ã–π –∫–æ–¥ (—Å—Ç—Ä–æ–∫–∏ —Å `+`) –∏—Ö –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç - —ç—Ç–æ –•–û–†–û–®–û, –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞\n\n"
            "–ê–õ–ì–û–†–ò–¢–ú –∞–Ω–∞–ª–∏–∑–∞:\n"
            "1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º —Ñ–∞–π–ª–æ–≤\n"
            "2. –ù–∞–π–¥–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞–≥–∏, —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ù–û–í–û–ú –∫–æ–¥–µ (`+` —Å—Ç—Ä–æ–∫–∏)\n"
            "3. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ best practices –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞\n"
            "4. –û—Ü–µ–Ω–∏ –≤–ª–∏—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É\n\n"
            "–§–û–†–ú–ê–¢ –≤—ã–≤–æ–¥–∞:\n"
            "- [SEVERITY][AREA] —Ñ–∞–π–ª:—Å—Ç—Ä–æ–∫–∞ - –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ù–û–í–û–ú –∫–æ–¥–µ (`+` —Å—Ç—Ä–æ–∫–∏). –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–æ–º.\n\n"
            "SEVERITY: CRITICAL (–±–ª–æ–∫–µ—Ä—ã), HIGH (–≤–∞–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã), MEDIUM (—É–ª—É—á—à–µ–Ω–∏—è), LOW (—Å—Ç–∏–ª—å)\n"
            "AREA: SECURITY, PERFORMANCE, LOGIC, ARCH, TESTS, STYLE\n\n"
            "–°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ù–û–í–û–ì–û –∫–æ–¥–∞ (`+` —Å—Ç—Ä–æ–∫–∏):\n"
            "- Python: async/await usage, exception handling, memory leaks, SQL injections –≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö\n"
            "- JavaScript/TypeScript: null checks, async patterns, XSS, performance –≤ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö\n"
            "- Docker: layer optimization, security, base images –≤ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö\n"
            "- Terraform: state management, security groups, cost optimization –≤ –Ω–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö\n"
            "- YAML: syntax, security contexts, resource limits –≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö\n\n"
            "–ï—Å–ª–∏ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –ù–û–í–û–ú –∫–æ–¥–µ (`+` —Å—Ç—Ä–æ–∫–∏) –Ω–µ—Ç, –æ—Ç–≤–µ—Ç—å: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.'"
        )
        return self.review_chunk(prompt, diffs)

    def global_summary(self, context: str) -> str:
        print("  üß† –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ...")
        prompt = (
            "–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞–π –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ —Ä–µ–≤—å—é.\n\n"
            "–°–¢–†–£–ö–¢–£–†–ê –æ—Ç—á—ë—Ç–∞:\n\n"
            "## –°—Ç–∞—Ç—É—Å —Ä–µ–≤—å—é\n"
            "–û–¥–Ω–æ –∏–∑: ‚úÖ –û–î–û–ë–†–ï–ù–û | ‚ö†Ô∏è –£–°–õ–û–í–ù–û –û–î–û–ë–†–ï–ù–û | ‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò\n"
            "–ö—Ä–∞—Ç–∫–æ –æ–±–æ—Å–Ω—É–π —Ä–µ—à–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).\n\n"
            "## –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
            "–¢–æ–ª—å–∫–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'.\n\n"
            "## –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏\n"
            "–ü—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–æ—è–≤–∏—Ç—å—Å—è –≤ production:\n"
            "- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å\n"
            "- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø—ã\n"
            "- –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å\n\n"
            "## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n"
            "–†–∞–∑–±–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–ø—Ä–æ–ø—É—Å–∫–∞–π –ø—É—Å—Ç—ã–µ):\n"
            "**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:** –ø—Ä–æ–±–ª–µ–º—ã –¥–∏–∑–∞–π–Ω–∞, coupling, separation of concerns\n"
            "**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** —É—è–∑–≤–∏–º–æ—Å—Ç–∏, —Å–µ–∫—Ä–µ—Ç—ã, –¥–æ—Å—Ç—É–ø—ã\n"
            "**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —Ä–µ—Å—É—Ä—Å—ã\n"
            "**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** –ø–æ–∫—Ä—ã—Ç–∏–µ, –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤\n"
            "**DevOps:** CI/CD, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –¥–µ–ø–ª–æ–π\n\n"
            "## –•–æ—Ä–æ—à–∏–µ —Ä–µ—à–µ–Ω–∏—è\n"
            "–û—Ç–º–µ—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–º PR.\n\n"
            "–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω, –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑."
        )
        result = self.review_chunk(prompt, context)
        print("  ‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–æ")
        return result
